package com.amazon.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;

import com.amazon.entity.Availableproduct;
import com.amazon.entity.Categories;
import com.amazon.entity.Product;
import com.amazon.service.ProductService;

import jakarta.servlet.http.HttpSession;

@Controller
@CrossOrigin("http://localhost:4200")
@RequestMapping("api/user")
public class ProductController {
	@Autowired
	ProductService productService;

	@GetMapping("allProduct")
	public ResponseEntity<List<Availableproduct>> allProduct() {
		return new ResponseEntity<>(productService.allProduct(), HttpStatus.OK);
	}

	@PostMapping("addToCart")
	public ResponseEntity<Product> addProductToCart(@RequestBody Product crt) {
		HttpSession session = LoginController.httpSession;
		if (session == null) {
			return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);
		}
		Product result = productService.addProductToCart((String) session.getAttribute("loggedInUser"), crt);
		if (result != null) {
			return new ResponseEntity<>(result, HttpStatus.OK);
		} else {
			return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}

	@GetMapping("viewCart")
	public ResponseEntity<List<Product>> viewCart() {
		HttpSession session = LoginController.httpSession;
		if (session == null) {
			return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);
		}
		return new ResponseEntity<>(productService.viewProductCart((String) session.getAttribute("loggedInUser")),
				HttpStatus.OK);
	}

	@DeleteMapping("delCartProductsById/{productid}")
	public ResponseEntity<Boolean> delCartProductsById(@PathVariable Integer productid) {
		HttpSession session = LoginController.httpSession;
		if (session == null) {
			return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);
		}
		boolean isDeleted = productService.delCartProductsById((String) session.getAttribute("loggedInUser"),
				productid);
		if (isDeleted) {
			return new ResponseEntity<>(true, HttpStatus.OK);
		} else {
			return new ResponseEntity<>(false, HttpStatus.NOT_FOUND);
		}
	}

	@PostMapping("buyProduct")
	public ResponseEntity<Product> addProductToBuy(@RequestBody Product crt) {
		HttpSession session = LoginController.httpSession;
		if (session == null) {
			return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);
		}
		Product result = productService.addProductToBuy((String) session.getAttribute("loggedInUser"), crt);
		if (result != null) {
			return new ResponseEntity<>(result, HttpStatus.OK);
		} else {
			return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}

	@GetMapping("viewOrder")
	public ResponseEntity<List<Product>> viewBuy() {
		HttpSession session = LoginController.httpSession;
		if (session == null) {
			return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);
		}
		return new ResponseEntity<>(productService.viewProductBuy((String) session.getAttribute("loggedInUser")),
				HttpStatus.OK);
	}

	@DeleteMapping("delBuyProductsById/{productid}")
	public ResponseEntity<Boolean> delBuyProductsById(@PathVariable Integer productid) {
		HttpSession session = LoginController.httpSession;
		if (session == null) {
			return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);
		}
		boolean isDeleted = productService.delBuyProductsById(productid);
		if (isDeleted) {
			return new ResponseEntity<>(true, HttpStatus.OK);
		} else {
			return new ResponseEntity<>(false, HttpStatus.NOT_FOUND);
		}
	}

	@GetMapping("viewProductsByCategory/{category}")
	public ResponseEntity<List<Availableproduct>> viewProductsByCategory(@PathVariable String category) {
		return new ResponseEntity<>(productService.viewProductsByCategory(category), HttpStatus.OK);
	}

	@GetMapping("viewCategory")
	public ResponseEntity<List<Categories>> viewCategory() {
		return new ResponseEntity<>( productService.viewCategory(), HttpStatus.OK);
	}

	@GetMapping("search/{name}")
	public ResponseEntity<List> search(@PathVariable String name) {
		return new ResponseEntity<>(productService.search(name), HttpStatus.OK);
	}

	@PutMapping("updateCart")
	public ResponseEntity<Product> updateCart(@RequestBody Product product) {
		HttpSession session = LoginController.httpSession;
		if (session == null) {
			return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);
		}
		return new ResponseEntity<>(productService.updateCart(product), HttpStatus.OK);
	}

	@PostMapping("buyProducts")
	public ResponseEntity<List<Product>> addProductsToBuy(@RequestBody List<Product> products) {
		HttpSession session = LoginController.httpSession;
		if (session == null) {
			return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);
		}
		List<Product> result = productService.addProductsToBuy(products);
		if (result != null && !result.isEmpty()) {
			return new ResponseEntity<>(result, HttpStatus.OK);
		} else {
			return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}

	@PutMapping("updateQuantity")
	public ResponseEntity<Availableproduct> updateQuantity(@RequestBody Availableproduct av) {
		HttpSession session = LoginController.httpSession;
		if (session == null) {
			return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);
		}
		try {
			Availableproduct updatedProduct = productService.updateQuantity(av.getProductid(), av.getQuantity());
			return new ResponseEntity<>(updatedProduct, HttpStatus.OK);
		} catch (Exception e) {
			e.printStackTrace();
			return new ResponseEntity<>(HttpStatus.BAD_GATEWAY);
		}
	}
}
