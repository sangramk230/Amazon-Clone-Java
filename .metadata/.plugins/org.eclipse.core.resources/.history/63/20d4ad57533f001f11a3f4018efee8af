package com.amazon.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.amazon.dao.ProductDao;
import com.amazon.entity.Availableproduct;
import com.amazon.entity.Categories;
import com.amazon.entity.Product;

@Service
public class ProductService {
    @Autowired
    ProductDao productDao;

    public List<Availableproduct> allProduct() {
        return productDao.allProduct();
    }

    public Product addProductToCart(Product product, String username) {
        return productDao.addProductToCart(product, "Cart", username);
    }

    public List<Product> viewProductCart(String username) {
        return productDao.viewProductCart("Cart", username);
    }

    public Boolean delCartProductsById(Integer productid, String username) {
        return productDao.delCartProductsById(productid, "Cart", username);
    }

    public Product addProductToBuy(Product product, String username) {
        return productDao.addProductToBuy(product, "Buy", username, "In Progress");
    }

    public List<Product> viewProductBuy(String username) {
        return productDao.viewProductBuy("Buy", username);
    }

    public Boolean delBuyProductsById(Integer productid, String username) {
        return productDao.delBuyProductsById(productid, "Buy", username);
    }

    public List<Availableproduct> viewProductsByCategory(String category) {
        return productDao.viewProductsByCategory(category);
    }

    public List<Categories> viewCategory() {
        return productDao.viewCategory();
    }

    public List<Availableproduct> search(String name) {
        return productDao.search(name);
    }

    public Product updateCart(Product product, String username) {
        return productDao.updateCart(product, username);
    }

    public List<Product> addProductsToBuy(List<Product> products, String username) {
        return productDao.addProductsToBuy(products, "Buy", username);
    }

    public Availableproduct updateQuantity(Long productid, Long quantity) {
        return productDao.updateQuantity(productid, quantity);
    }
}
